DROP TABLE IF EXISTS top_rated_films;

CREATE TABLE top_rated_films(
title VARCHAR NOT NULL,
release_year SMALLINT);

DROP TABLE IF EXISTS most_popular_films;
CREATE TABLE most_popular_films(
title VARCHAR NOT NULL,
release_year SMALLINT);

INSERT INTO top_rated_films(title, release_year)
VALUES
('Fast and furious 7', 2011),
('The redemption', 2015),
('Shooter', 2017);

INSERT INTO most_popular_films(title, release_year)
VALUES
('American snipper', 2015),
('Doulou continent',2018),
('Outpost',2019),
('Shooter', 2017);


SELECT * FROM most_popular_films
EXCEPT
SELECT * FROM top_rated_films

============================================================================================================================================

GROUPING SET

CREATE TABLE professional_courses(
    course_name VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    sold_quantity INT NOT NULL,
    PRIMARY KEY (course_name, segment)
);

INSERT INTO professional_courses(course_name, segment, sold_quantity)
VALUES
    ('Data Structure in Python', 'Premium', 100),
    ('Algorithm Design in Python', 'Basic', 200),
    ('Data Structure in Java', 'Premium', 500),
    ('Algorithm Design in Java', 'Basic', 100);


-- Grouping by course_name & segment (first set)
SELECT
    course_name,
    segment,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    course_name,
    segment;

-- Grouping by course_name only (second set)
SELECT
    course_name,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    course_name;


-- Grouping by segment only (third set)
SELECT
    segment,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    segment;


-- Consolidated Grouping
SELECT
    GROUPING(course_name) grouping_course,
    GROUPING(segment) grouping_segment,
    course_name,
    segment,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    GROUPING SETS (
        (course_name, segment),
        (course_name),
        (segment),
        ()
    )
ORDER BY
    course_name,
    segment;


===============================================================================================


CUBE

SELECT
    course_name,
    segment,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    CUBE (course_name, segment)
ORDER BY
    course_name,
    segment;


===================================================================================================

ROLLUP

SELECT
    course_name,
    segment,
    SUM (sold_quantity)
FROM
    professional_courses
GROUP BY
    ROLLUP (course_name, segment)
ORDER BY
    course_name,
    segment;


===================================================================================================

TRANSACTIONS

DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
);

BEGIN TRANSACTION;

SAVEPOINT A;

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

INSERT INTO accounts(name,balance)
VALUES('Alexa',5000);

SAVEPOINT B;

INSERT INTO accounts(name,balance)
VALUES('John',10000);

INSERT INTO accounts(name,balance)
VALUES('Mika',5000);

ROLLBACK TO SAVEPOINT B;

COMMIT;

SELECT * FROM accounts;